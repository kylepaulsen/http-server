#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    exec = require('child_process').exec,
    colors = require('colors'),
    httpServer = require('../lib/http-server'),
    portfinder = require('portfinder'),
    opener = require('opener'),
    argv = require('optimist')
      .boolean('cors')
      .argv;

if (argv.h || argv.help) {
  console.log([
    "usage: http-server [path] [options]",
    "",
    "options:",
    "  -p                 Port to use [8080]",
    "  -a                 Address to use [0.0.0.0]",
    "  -d                 Show directory listings [true]",
    "  -i                 Display autoIndex [true]",
    "  -e --ext           Default file extension if none supplied [none]",
    "  -s --silent        Suppress log messages from output",
    "  --nocors           Disable CORS via the 'Access-Control-Allow-Origin' header",
    "  -o                 Open browser window after staring the server",
    "  -c                 Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.",
    "                     To disable caching, use -c-1.",
    "",
    "  -S --ssl           Enable https.",
    "  -C --cert          Path to ssl cert file (default: cert.pem).",
    "  -K --key           Path to ssl key file (default: key.pem).",
    "",
    "  -h --help          Print this list and exit."
  ].join('\n'));
  process.exit();
}

var port = argv.p || parseInt(process.env.PORT, 10),
    host = argv.a || '0.0.0.0',
    log = (argv.s || argv.silent) ? (function () {}) : console.log,
    ssl = !!argv.S || !!argv.ssl,
    defaultKeyPath = path.join(__dirname, 'key.pem'),
    defaultCertPath = path.join(__dirname, 'cert.pem'),
    defaultCSRPath = path.join(__dirname, 'csr.pem'),
    requestLogger;

if (!argv.s && !argv.silent) {
  requestLogger = function(req) {
    log('[%s] "%s %s" "%s"', (new Date).toUTCString(), req.method.cyan, req.url.cyan, req.headers['user-agent']);
  }
}

if (!port) {
  portfinder.basePort = 8080;
  portfinder.getPort(function (err, port) {
    if (err) throw err;
    listen(port);
  });
} else {
  listen(port);
}

function listen(port) {
  var options = {
    root: argv._[0],
    cache: argv.c,
    showDir: argv.d,
    autoIndex: argv.i,
    ext: argv.e || argv.ext,
    logFn: requestLogger,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'
    }
  };

  if (argv.nocors) {
    delete options.headers;
  }

  var createServer = function() {
    var server = httpServer.createServer(options);
    server.listen(port, host, function() {
      var uri = [ssl ? 'https' : 'http', '://', host, ':', port].join('');
      log('Starting up http-server, serving '.yellow
        + server.root.cyan
        + ((ssl) ? ' through'.yellow + ' https'.cyan : '')
        + ' on: '.yellow
        + uri.cyan);

      log('Hit CTRL-C to stop the server');
      if (argv.o) {
        opener(uri);
      }
    });
  };

  if (ssl) {
    options.https = {
      cert: argv.C || argv.cert || 'cert.pem',
      key: argv.K || argv.key || 'key.pem'
    };

    if (!fs.existsSync(options.https.cert)) {
      log('Could not find cert file.'.yellow);
      options.https.cert = defaultCertPath;
      options.https.key = defaultKeyPath;

      var handleCreatingCertError = function(err) {
        if (err) {
          log(('Error creating cert: ' + err).red + '\nMake sure you can run the openssl command.'.yellow);
        }
      };

      if (!fs.existsSync(defaultCertPath)) {
        log('Generating and using default cert and key files in: '.yellow + __dirname.cyan);
        exec('openssl genrsa -out "' + defaultKeyPath + '" 4096', function(err) {
          handleCreatingCertError(err);
          err || exec('openssl req -new -key "' + defaultKeyPath + '" -out "' + defaultCSRPath +
            '" -subj "/C=US/ST=California/L=San Francisco/O=Local-Company' +
            '/OU=dev/CN=localhost/emailAddress=test@test.com"', function(err) {

            handleCreatingCertError(err);
            err || exec('openssl x509 -req -days 1000 -in "' + defaultCSRPath + '" -signkey "' +
              defaultKeyPath + '" -out "' + defaultCertPath + '"', function(err) {

              handleCreatingCertError(err);
              err || createServer();
            });
          });
        });
        return;
      }
      log('Using default cert and key files in: '.yellow + __dirname.cyan);
    }
  }

  createServer();
}

if (process.platform !== 'win32') {
  //
  // Signal handlers don't work on Windows.
  //
  process.on('SIGINT', function () {
    log('http-server stopped.'.red);
    process.exit();
  });
}
